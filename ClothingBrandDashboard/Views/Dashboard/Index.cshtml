@using ClothingBrandDashboard.ModelVW
@model List<GetOrder>
@{
    ViewBag.bigtitle = "Dashboard ";
    ViewBag.smalltitle = "Details ";
    Layout = "~/Views/Shared/_Dashboard.cshtml";
    // int num = (int)ViewData["orders"];
    decimal productsOut = 0;
    foreach (var ord in Model)
    {
        foreach (var item in ord.OrderItems)
        {
            productsOut += item.Quantity;
        }

    }
    decimal width1 = (decimal)ViewData["totalQuantity"] / productsOut;
    int width2 = (int)ViewData["enrolls"] / 30;
}

<div class="app-content">
    <!--begin::Container-->
    <div class="container-fluid">
        <!--begin::Row-->
        <div class="row">
            <!--begin::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 1-->
                <div class="small-box text-bg-primary">
                    <div class="inner">
                        <h3>@ViewData["orders"]</h3>
                        <p>Orders</p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path d="M2.25 2.25a.75.75 0 000 1.5h1.386c.17 0 .318.114.362.278l2.558 9.592a3.752 3.752 0 00-2.806 3.63c0 .414.336.75.75.75h15.75a.75.75 0 000-1.5H5.378A2.25 2.25 0 017.5 15h11.218a.75.75 0 00.674-.421 60.358 60.358 0 002.96-7.228.75.75 0 00-.525-.965A60.864 60.864 0 005.68 4.509l-.232-.867A1.875 1.875 0 003.636 2.25H2.25zM3.75 20.25a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zM16.5 20.25a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z"></path>
                    </svg> <a href="/Order/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 1-->
            </div> <!--end::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 2-->
                <div class="small-box text-bg-success">
                    <div class="inner">
                        <h3>@ViewData["products"]<sup class="fs-5"></sup></h3>
                        <p>Products </p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path d="M18.375 2.25c-1.035 0-1.875.84-1.875 1.875v15.75c0 1.035.84 1.875 1.875 1.875h.75c1.035 0 1.875-.84 1.875-1.875V4.125c0-1.036-.84-1.875-1.875-1.875h-.75zM9.75 8.625c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-.75a1.875 1.875 0 01-1.875-1.875V8.625zM3 13.125c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v6.75c0 1.035-.84 1.875-1.875 1.875h-.75A1.875 1.875 0 013 19.875v-6.75z"></path>
                    </svg> <a href="/Product/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 2-->
            </div> <!--end::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 3-->
                <div class="small-box text-bg-warning">
                    <div class="inner">
                        <h3>@ViewData["courses"]</h3>
                        <p>Courses</p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path d="M6.25 6.375a4.125 4.125 0 118.25 0 4.125 4.125 0 01-8.25 0zM3.25 19.125a7.125 7.125 0 0114.25 0v.003l-.001.119a.75.75 0 01-.363.63 13.067 13.067 0 01-6.761 1.873c-2.472 0-4.786-.684-6.76-1.873a.75.75 0 01-.364-.63l-.001-.122zM19.75 7.5a.75.75 0 00-1.5 0v2.25H16a.75.75 0 000 1.5h2.25v2.25a.75.75 0 001.5 0v-2.25H22a.75.75 0 000-1.5h-2.25V7.5z"></path>
                    </svg> <a href="/Course/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 3-->
            </div> <!--end::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 4-->
                <div class="small-box text-bg-danger">
                    <div class="inner">
                        <h3>@ViewData["categories"]</h3>
                        <p>Categories</p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path clip-rule="evenodd" fill-rule="evenodd" d="M2.25 13.5a8.25 8.25 0 018.25-8.25.75.75 0 01.75.75v6.75H18a.75.75 0 01.75.75 8.25 8.25 0 01-16.5 0z"></path>
                        <path clip-rule="evenodd" fill-rule="evenodd" d="M12.75 3a.75.75 0 01.75-.75 8.25 8.25 0 018.25 8.25.75.75 0 01-.75.75h-7.5a.75.75 0 01-.75-.75V3z"></path>
                    </svg> <a href="/Category/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 4-->
               
            </div> <!--end::Col-->
        </div> <!--end::Row--> <!--begin::Row-->


        <div class="row">
            <!--begin::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 1-->
                <div class="small-box text-bg-primary">
                    <div class="inner">
                        <h3>@ViewData["customOrders"]</h3>
                        <p>Custom Orders</p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path d="M2.25 2.25a.75.75 0 000 1.5h1.386c.17 0 .318.114.362.278l2.558 9.592a3.752 3.752 0 00-2.806 3.63c0 .414.336.75.75.75h15.75a.75.75 0 000-1.5H5.378A2.25 2.25 0 017.5 15h11.218a.75.75 0 00.674-.421 60.358 60.358 0 002.96-7.228.75.75 0 00-.525-.965A60.864 60.864 0 005.68 4.509l-.232-.867A1.875 1.875 0 003.636 2.25H2.25zM3.75 20.25a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zM16.5 20.25a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z"></path>
                    </svg> <a href="/CustomOrder/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 1-->
            </div> <!--end::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 2-->
                <div class="small-box text-bg-success">
                    <div class="inner">
                        <h3>@ViewData["discounts"]<sup class="fs-5"></sup></h3>
                        <p>Discounts </p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path d="M18.375 2.25c-1.035 0-1.875.84-1.875 1.875v15.75c0 1.035.84 1.875 1.875 1.875h.75c1.035 0 1.875-.84 1.875-1.875V4.125c0-1.036-.84-1.875-1.875-1.875h-.75zM9.75 8.625c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-.75a1.875 1.875 0 01-1.875-1.875V8.625zM3 13.125c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v6.75c0 1.035-.84 1.875-1.875 1.875h-.75A1.875 1.875 0 013 19.875v-6.75z"></path>
                    </svg> <a href="/Discount/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 2-->
            </div> <!--end::Col-->
            <div class="col-lg-3 col-6">
                <!--begin::Small Box Widget 3-->
                <div class="small-box text-bg-warning">
                    <div class="inner">
                        <h3>@ViewData["users"]</h3>
                        <p>  Users</p>
                    </div> <svg class="small-box-icon" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                        <path d="M6.25 6.375a4.125 4.125 0 118.25 0 4.125 4.125 0 01-8.25 0zM3.25 19.125a7.125 7.125 0 0114.25 0v.003l-.001.119a.75.75 0 01-.363.63 13.067 13.067 0 01-6.761 1.873c-2.472 0-4.786-.684-6.76-1.873a.75.75 0 01-.364-.63l-.001-.122zM19.75 7.5a.75.75 0 00-1.5 0v2.25H16a.75.75 0 000 1.5h2.25v2.25a.75.75 0 001.5 0v-2.25H22a.75.75 0 000-1.5h-2.25V7.5z"></path>
                    </svg> <a href="/User/Index" class="small-box-footer link-light link-underline-opacity-0 link-underline-opacity-50-hover">
                        More info <i class="bi bi-link-45deg"></i>
                    </a>
                </div> <!--end::Small Box Widget 3-->
            </div> <!--end::Col-->
           

            </div> <!--end::Col-->
        </div> <!--end::Row--> <!--begin::Row-->

    </div> <!--end::Container-->

   
   @* start add *@
<div class="row">
    <div class="col-md-12">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title">Monthly Recap Report</h5>
                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-lte-toggle="card-collapse"> <i data-lte-icon="expand" class="bi bi-plus-lg"></i> <i data-lte-icon="collapse" class="bi bi-dash-lg"></i> </button>
                    <div class="btn-group">
                        <button type="button" class="btn btn-tool dropdown-toggle" data-bs-toggle="dropdown"> <i class="bi bi-wrench"></i> </button>
                        <div class="dropdown-menu dropdown-menu-end" role="menu">
                            <a href="#" class="dropdown-item">Action</a> <a href="#" class="dropdown-item">Another action</a> <a href="#" class="dropdown-item">
                                Something else here
                            </a> <a class="dropdown-divider"></a> <a href="#" class="dropdown-item">Separated link</a>
                        </div>
                    </div> <button type="button" class="btn btn-tool" data-lte-toggle="card-remove"> <i class="bi bi-x-lg"></i> </button>
                </div>
            </div> <!-- /.card-header -->
            <div class="card-body">
                <!--begin::Row-->
                <div class="row">
                    <div class="col-md-8">
                        <p class="text-center"> <strong>Sales: 1 Oct, 2024 - 30 Mar, 2025</strong> </p>
                        <div id="sales-chart"></div>
                    </div> <!-- /.col -->
                    <div class="col-md-4">
                        <p class="text-center"> <strong>Goal Completion</strong> </p>
                       
                        <div class="progress-group">
                            Complete Purchase
                            <span class="float-end"><b>@productsOut</b>/ @ViewData["totalQuantity"]</span>
                            <div class="progress progress-sm">
                                <div class="progress-bar text-bg-danger" style="width:@($"{width1}%")"></div>
                            </div>
                        </div> <!-- /.progress-group -->
                        <br />
                        <div class="progress-group">
                            <span class="progress-text">Student Enrolls</span> <span class="float-end"><b>@ViewData["enrolls"]</b>/ 30</span>
                            <div class="progress progress-sm">
                                <div class="progress-bar text-bg-success" style="width:@($"{width1}%")"></div>
                            </div>
                        </div> <!-- /.progress-group -->
                       
                    </div> <!-- /.col -->
                </div> <!--end::Row-->
            </div> <!-- ./card-body -->
            <div class="card-footer">
                <!--begin::Row-->
                <div class="row">
                    <div class="col-md-3 col-6">
                        <div class="text-center border-end">
                            <span class="text-success">
                                @* <i class="bi bi-caret-up-fill"></i> 17% *@
                            </span>
                            <h5 class="fw-bold mb-0">@ViewData["totalRevenue"]</h5> <span class="text-uppercase">TOTAL REVENUE</span>
                        </div>
                    </div> <!-- /.col -->
                    <div class="col-md-3 col-6">
                        <div class="text-center border-end">
                            <span class="text-info">
                                @* <i class="bi bi-caret-left-fill"></i> 0% *@
                            </span>
                            <h5 class="fw-bold mb-0">@ViewData["totalCost"]</h5> <span class="text-uppercase">TOTAL COST</span>
                        </div>
                    </div> <!-- /.col -->
                    <div class="col-md-3 col-6">
                        <div class="text-center border-end">
                            <span class="text-success">
                                @* <i class="bi bi-caret-up-fill"></i> 20% *@
                            </span>
                            <h5 class="fw-bold mb-0">@ViewData["totalProfit"]</h5> <span class="text-uppercase">TOTAL PROFIT</span>
                        </div>
                    </div> <!-- /.col -->
                    <div class="col-md-3 col-6">
                        <div class="text-center">
                            <span class="text-danger">
                                @* <i class="bi bi-caret-down-fill"></i> 18% *@
                            </span>
                            <h5 class="fw-bold mb-0">@Model.Count</h5> <span class="text-uppercase">GOAL COMPLETIONS</span>
                        </div>
                    </div>
                </div> <!--end::Row-->
            </div> <!-- /.card-footer -->
        </div> <!-- /.card -->
    </div> <!-- /.col -->
</div> <!--end::Row--> <!--begin::Row-->
   
   @* end add *@
    




<div class="card">
    <div class="card-header">
        <h3 class="card-title">Latest Orders</h3>
        <div class="card-tools"> <button type="button" class="btn btn-tool" data-lte-toggle="card-collapse"> <i data-lte-icon="expand" class="bi bi-plus-lg"></i> <i data-lte-icon="collapse" class="bi bi-dash-lg"></i> </button> <button type="button" class="btn btn-tool" data-lte-toggle="card-remove"> <i class="bi bi-x-lg"></i> </button> </div>
    </div> <!-- /.card-header -->
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table m-0">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Item</th>
                        <th>Status</th>
                        <th>Details</th>

                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td> <a href="" class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">@item.Id</a> </td>

                                @* <td>@item.OrderItems[0].ProductName</td> *@
                                <td>
                                    @if (item.OrderItems != null)
                                    {
                                        // Join product names into a single string
                                        @string.Join(", ", item.OrderItems.Select(o => o.ProductName))
                                    }
                                    else
                                    {
                                        <span>No items</span>
                                    }




                                <td>
                                        @{
                                            var badgeClass = item.OrderStatus == "Shipped" ? "text-bg-success" : "text-bg-danger";
                                        }
                                    <span class="badge @badgeClass">@item.OrderStatus</span>
                                </td>
                                <td>
                                    <a href="/Order/Detail/@item.Id" class="btn btn-warning">Details</a>

                                </td>

                     

                            </tr>


                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">No data available</td>
                        </tr>
                    }







                </tbody>



            </table>
        </div> <!-- /.table-responsive -->
    </div> <!-- /.card-body -->
    <div class="card-footer clearfix">

        <a href="/Order/Index" class="btn btn-sm btn-secondary float-end">
            View All Orders
        </a>
    </div> <!-- /.card-footer -->
</div> <!-- /.card -->






   
@* start add js *@

    @section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/overlayscrollbars@2.3.0/browser/overlayscrollbars.browser.es6.min.js" integrity="sha256-H2VM7BKda+v2Z4+DRy69uknwxjyDRhszjXFhsL4gD3w=" crossorigin="anonymous"></script> <!--end::Third Party Plugin(OverlayScrollbars)--><!--begin::Required Plugin(popperjs for Bootstrap 5)-->
@*     <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha256-whL0tQWoY1Ku1iskqPFvmZ+CHsvmRWx/PIoEvIeWh4I=" crossorigin="anonymous"></script> <!--end::Required Plugin(popperjs for Bootstrap 5)--><!--begin::Required Plugin(Bootstrap 5)-->
 *@    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha256-YMa+wAM6QkVyz999odX7lPRxkoYAan8suedu4k2Zur8=" crossorigin="anonymous"></script> <!--end::Required Plugin(Bootstrap 5)--><!--begin::Required Plugin(AdminLTE)-->
    <script src="../../dist/js/adminlte.js"></script> <!--end::Required Plugin(AdminLTE)--><!--begin::OverlayScrollbars Configure-->
    <script>
        const SELECTOR_SIDEBAR_WRAPPER = ".sidebar-wrapper";
        const Default = {
            scrollbarTheme: "os-theme-light",
            scrollbarAutoHide: "leave",
            scrollbarClickScroll: true,
        };
        document.addEventListener("DOMContentLoaded", function() {
            const sidebarWrapper = document.querySelector(SELECTOR_SIDEBAR_WRAPPER);
            if (
                sidebarWrapper &&
                typeof OverlayScrollbarsGlobal?.OverlayScrollbars !== "undefined"
            ) {
                OverlayScrollbarsGlobal.OverlayScrollbars(sidebarWrapper, {
                    scrollbars: {
                        theme: Default.scrollbarTheme,
                        autoHide: Default.scrollbarAutoHide,
                        clickScroll: Default.scrollbarClickScroll,
                    },
                });
            }
        });
    </script> <!--end::OverlayScrollbars Configure--> <!-- OPTIONAL SCRIPTS --> <!-- apexcharts -->
    <script src="https://cdn.jsdelivr.net/npm/apexcharts@3.37.1/dist/apexcharts.min.js" integrity="sha256-+vh8GkaU7C9/wbSLIcwq82tQ2wTf44aOHA8HlBMwRI8=" crossorigin="anonymous"></script>
    <script>
        // NOTICE!! DO NOT USE ANY OF THIS JAVASCRIPT
        // IT'S ALL JUST JUNK FOR DEMO
        // ++++++++++++++++++++++++++++++++++++++++++

        /* apexcharts
         * -------
         * Here we will create a few charts using apexcharts
         */

        //-----------------------
        // - MONTHLY SALES CHART -
        //-----------------------


        //                                                                 final------------
        let categories = [];
        let categoryData = {}; // Store category data by month
        let productCategoryMap = {}; // Map product names to category names

        // Fetch product data to create a mapping of product names to category names
        fetch("/Product/GetData")
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json(); // Parse JSON data
            })
            .then(result => {
                const products = result.data;

                // Create a mapping of product names to their category names
                products.forEach(product => {
                    productCategoryMap[product.name] = product.categoryName;
                    if (!categories.includes(product.categoryName)) {
                        categories.push(product.categoryName);
                    }
                });

                // Initialize categoryData with empty arrays for each category and month
                categories.forEach(category => {
                    categoryData[category] = Array(12).fill(0);
                });

                // Fetch orders data after building the productCategoryMap
                return fetch("/Order/GetData");
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(result => {
                const orders = result.data;

                // Process each order and match items to category names
                orders.forEach(order => {
                    const orderDate = new Date(order.orderDate);
                    const monthIndex = orderDate.getMonth(); // Get month index (0 for Jan, 11 for Dec)

                    order.orderItems.forEach(item => {
                        const productName = item.productName;
                        const quantity = item.quantity;

                        // Get the category name using the productCategoryMap
                        const categoryName = productCategoryMap[productName];

                        if (categoryName && categoryData[categoryName]) {
                            categoryData[categoryName][monthIndex] += quantity; // Accumulate quantity by month
                        }
                    });
                });

                // Prepare series data for ApexCharts
                const seriesData = categories.map(category => ({
                    name: category,
                    data: categoryData[category] || Array(12).fill(0)
                }));

                // Update chart with the new data
                sales_chart.updateOptions({
                    series: seriesData
                });
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });

        // Initial chart options
        const sales_chart_options = {
            series: [],
            chart: {
                height: 180,
                type: "area",
                toolbar: { show: false },
            },
            legend: { show: true },
            colors: ["#0d6efd", "#20c997", "red", "orange"],
            dataLabels: { enabled: false },
            stroke: { curve: "smooth" },
            xaxis: {
                type: "datetime",
                categories: [
                    "2024-01-01", "2024-02-01", "2024-03-01", "2024-04-01",
                    "2024-05-01", "2024-06-01", "2024-07-01", "2024-08-01",
                    "2024-09-01", "2024-10-01", "2024-11-01", "2024-12-01"
                ]
            },
            tooltip: {
                x: { format: "MMMM yyyy" },
            },
        };

        // Initialize and render the chart
        const sales_chart = new ApexCharts(
            document.querySelector("#sales-chart"),
            sales_chart_options
        );
        sales_chart.render();


        //                                                                        end of final







        //tryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy     start
        // let categories = [];
        // let categoryData = {}; // Store category data by month

        // // Fetch category data and store in categories array
        // fetch("/Category/GetData")
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error('Network response was not ok ' + response.statusText);
        //         }
        //         return response.json(); // Parse JSON data
        //     })
        //     .then(result => {
        //         categories = Array.isArray(result.data)
        //             ? result.data.map(category => category.name)
        //             : [];

        //         // Initialize categoryData with empty arrays for each category and month
        //         categories.forEach(category => {
        //             categoryData[category] = Array(12).fill(0);
        //         });

        //         // Fetch orders data after fetching categories
        //         return fetch("/Order/GetData");
        //     })
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error('Network response was not ok ' + response.statusText);
        //         }
        //         return response.json();
        //     })
        //     .then(result => {
        //         const orders = result.data; // Access the orders list

        //         orders.forEach(order => {
        //             const orderDate = new Date(order.orderDate);
        //             const monthIndex = orderDate.getMonth(); // Get month index (0 for Jan, 11 for Dec)

        //             // Process each item in the order
        //             order.orderItems.forEach(item => {
        //                 const categoryName = item.productName; // Use product name as category
        //                 const quantity = item.quantity;

        //                 if (categoryData[categoryName]) {
        //                     categoryData[categoryName][monthIndex] += quantity; // Accumulate quantity by month
        //                 }
        //             });
        //         });

        //         // Prepare series data for ApexCharts
        //         const seriesData = categories.map(category => ({
        //             name: category,
        //             data: categoryData[category] || Array(12).fill(0)
        //         }));
        //         console.log(seriesData);
        //         console.log(seriesData.data);


        //         // Update chart with the new data
        //         sales_chart.updateOptions({
        //             series: seriesData
        //         });
        //     })
        //     .catch(error => {
        //         console.error('Fetch error:', error);
        //     });

        // // Initial chart options
        // const sales_chart_options = {
        //     series: [],
        //     chart: {
        //         height: 180,
        //         type: "area",
        //         toolbar: { show: false },
        //     },
        //     legend: { show: true },
        //     colors: ["#0d6efd", "#20c997", "red", "orange"],
        //     dataLabels: { enabled: false },
        //     stroke: { curve: "smooth" },
        //     xaxis: {
        //         type: "datetime",
        //         categories: [
        //             "2024-01-01", "2024-02-01", "2024-03-01", "2024-04-01",
        //             "2024-05-01", "2024-06-01", "2024-07-01", "2024-08-01",
        //             "2024-09-01", "2024-10-01", "2024-11-01", "2024-12-01"
        //         ]
        //     },
        //     tooltip: {
        //         x: { format: "MMMM yyyy" },
        //     },
        // };

        // // Initialize and render the chart
        // const sales_chart = new ApexCharts(
        //     document.querySelector("#sales-chart"),
        //     sales_chart_options
        // );
        // sales_chart.render();



        //tryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy      end




        //**************** */
        // let categories = [];

        // fetch("/Category/GetData")
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error('Network response was not ok ' + response.statusText);
        //         }
        //         return response.json(); // Parse JSON data
        //     })
        //     .then(result => {
        //         console.log("Fetched data:", result);

        //         // Check if result.data is an array and extract names
        //         categories = Array.isArray(result.data)
        //             ? result.data.map(category => category.name)
        //             : [];

        //         console.log("Category names:", categories);

        //         // Update chart series names after fetching data
        //         sales_chart.updateOptions({
        //             series: categories.map((name, index) => ({
        //                 name: name,
        //                 data: index === 0 ? [28, 48, 40, 19, 86, 27, 90] :
        //                     index === 1 ? [65, 59, 80, 81, 56, 55, 40] :
        //                         index === 2 ? [50, 60, 70, 80, 90, 100, 110] :
        //                             [20, 30, 40, 50, 60, 70, 80] // Example data arrays
        //             }))
        //         });
        //     })
        //     .catch(error => {
        //         console.error('Fetch error:', error); // Handle any errors
        //     });

        // // Initial chart options
        // const sales_chart_options = {
        //     series: [
        //         { name: "SHABAN", data: [28, 48, 40, 19, 86, 27, 90] },
        //         { name: "MEKAWY", data: [65, 59, 80, 81, 56, 55, 40] },
        //         { name: "Ramadan", data: [50, 60, 70, 80, 90, 100, 110] },
        //         { name: "project", data: [20, 30, 40, 50, 60, 70, 80] }
        //     ],
        //     chart: {
        //         height: 180,
        //         type: "area",
        //         toolbar: { show: false },
        //     },
        //     legend: { show: true },
        //     colors: ["#0d6efd", "#20c997", "red", "orange"],
        //     dataLabels: { enabled: false },
        //     stroke: { curve: "smooth" },
        //     xaxis: {
        //         type: "datetime",
        //         categories: [
        //             "2024-10-01",
        //             "2024-11-01",
        //             "2024-12-01",
        //             "2025-01-01",
        //             "2025-02-01",
        //             "2025-03-01",
        //             "2025-04-01"

        //         ]
        //     },
        //     tooltip: {
        //         x: { format: "MMMM yyyy" },
        //     },
        // };

        // // Initialize and render the chart
        // const sales_chart = new ApexCharts(
        //     document.querySelector("#sales-chart"),
        //     sales_chart_options
        // );
        // sales_chart.render();

        //**************** */










        // let categories;
        // fetch("/Category/GetData")
        //     .then(response => {
        //         if (!response.ok) {
        //             throw new Error('Network response was not ok ' + response.statusText);
        //         }
        //         return response.json(); // Parse JSON data
        //     })
        //     .then(result => {
        //         console.log("Fetched data:", result);

        //         // Check if result.data is an array and extract names
        //         const categoryNames = Array.isArray(result.data)
        //             ? result.data.map(category => category.name)
        //             : [];

        //         console.log("Category names:", categoryNames);
        //         categories=categoryNames
        //         // Use categoryNames in your application
                
        //     })
        //     .catch(error => {
        //         console.error('Fetch error:', error); // Handle any errors
        //     });

        // const sales_chart_options = {
        //     series: [{
        //         name: "SHABAN",
        //         data: [28, 48, 40, 19, 86, 27, 90],
        //         // data: [28, 48, 40, 19, 86, 27, 90],
        //     },
            
        //     {
        //         name: "MEKAWY",
        //         data: [65, 59, 80, 81, 56, 55, 40],
        //     },
        //     {
        //         name: "Ramadan",
        //         data: [65, 59, 80, 81, 56, 55, 40],
        //     },
        //     {
        //         name: "project",
        //         data: [65, 59, 80, 81, 56, 55, 40],
        //     },
        //     ],
        //     chart: {
        //         height: 180,
        //         type: "area",
        //         toolbar: {
        //             show: false,
        //         },
        //     },
        //     legend: {
        //         show: true,
        //     },
        //     colors: ["#0d6efd", "#20c997","red"],
        //     dataLabels: {
        //         enabled: false,
        //     },
        //     stroke: {
        //         curve: "smooth",
        //     },
        //     xaxis: {
        //         type: "datetime",
        //         categories: [
        //             "2023-01-01",
        //             "2023-02-01",
        //             "2023-03-01",
        //             "2023-04-01",
        //             "2023-05-01",
        //             "2023-06-01",
        //             "2023-07-01",
        //         ],
        //     },
        //     tooltip: {
        //         x: {
        //             format: "MMMM yyyy",
        //         },
        //     },
        // };

        // const sales_chart = new ApexCharts(
        //     document.querySelector("#sales-chart"),
        //     sales_chart_options,
        // );
        // sales_chart.render();

        



        //---------------------------
        // - END MONTHLY SALES CHART -
        //---------------------------

        // function createSparklineChart(selector, data) {
        //     const options = {
        //         series: [{
        //             data
        //         }],
        //         chart: {
        //             type: "line",
        //             width: 150,
        //             height: 30,
        //             sparkline: {
        //                 enabled: true,
        //             },
        //         },
        //         colors: ["var(--bs-primary)"],
        //         stroke: {
        //             width: 2,
        //         },
        //         tooltip: {
        //             fixed: {
        //                 enabled: false,
        //             },
        //             x: {
        //                 show: false,
        //             },
        //             y: {
        //                 title: {
        //                     formatter: function(seriesName) {
        //                         return "";
        //                     },
        //                 },
        //             },
        //             marker: {
        //                 show: false,
        //             },
        //         },
        //     };

        //     const chart = new ApexCharts(document.querySelector(selector), options);
        //     chart.render();
        // }

        // const table_sparkline_1_data = [
        //     25, 66, 41, 89, 63, 25, 44, 12, 36, 9, 54,
        // ];
        // const table_sparkline_2_data = [
        //     12, 56, 21, 39, 73, 45, 64, 52, 36, 59, 44,
        // ];
        // const table_sparkline_3_data = [
        //     15, 46, 21, 59, 33, 15, 34, 42, 56, 19, 64,
        // ];
        // const table_sparkline_4_data = [
        //     30, 56, 31, 69, 43, 35, 24, 32, 46, 29, 64,
        // ];
        // const table_sparkline_5_data = [
        //     20, 76, 51, 79, 53, 35, 54, 22, 36, 49, 64,
        // ];
        // const table_sparkline_6_data = [
        //     5, 36, 11, 69, 23, 15, 14, 42, 26, 19, 44,
        // ];
        // const table_sparkline_7_data = [
        //     12, 56, 21, 39, 73, 45, 64, 52, 36, 59, 74,
        // ];

        // createSparklineChart("#table-sparkline-1", table_sparkline_1_data);
        // createSparklineChart("#table-sparkline-2", table_sparkline_2_data);
        // createSparklineChart("#table-sparkline-3", table_sparkline_3_data);
        // createSparklineChart("#table-sparkline-4", table_sparkline_4_data);
        // createSparklineChart("#table-sparkline-5", table_sparkline_5_data);
        // createSparklineChart("#table-sparkline-6", table_sparkline_6_data);
        // createSparklineChart("#table-sparkline-7", table_sparkline_7_data);

        //-------------
        // - PIE CHART -
        //-------------

        // const pie_chart_options = {
        //     series: [700, 500, 400, 600, 300, 100],
        //     chart: {
        //         type: "donut",
        //     },
        //     labels: ["Chrome", "Edge", "FireFox", "Safari", "Opera", "IE"],
        //     dataLabels: {
        //         enabled: false,
        //     },
        //     colors: [
        //         "#0d6efd",
        //         "#20c997",
        //         "#ffc107",
        //         "#d63384",
        //         "#6f42c1",
        //         "#adb5bd",
        //     ],
        // };

        // const pie_chart = new ApexCharts(
        //     document.querySelector("#pie-chart"),
        //     pie_chart_options,
        // );
        // pie_chart.render();

        //-----------------
        // - END PIE CHART -
        //-----------------
    </script> <!--end::Script-->




    @* <h2>hi</h2> *@
    @* <script src="~/js/Products.js"></script> *@



}
@* end add js *@
